////////////////////////////////////////////////////////////////////////////////
// Warning: This file was automatically generated by SmallBufferGenerator.
//          If you edit this by hand, the next run of SmallBufferGenerator
//          will overwrite your edits.
////////////////////////////////////////////////////////////////////////////////

namespace CommonEcs.Goap {
    [System.Runtime.InteropServices.StructLayout(
        System.Runtime.InteropServices.LayoutKind.Sequential)]
    public unsafe struct GoapActionList64 {
        public ref struct Enumerator {
            private readonly GoapAction* m_Elements;

            private int m_Index;

            public Enumerator(GoapAction* elements) {
                m_Elements = elements;
                m_Index = -1;
            }

            public bool MoveNext() {
                m_Index++;
                return m_Index < 64;
            }

            public ref GoapAction Current {
                get {
                    RequireIndexInBounds();
                    return ref m_Elements[m_Index];
                }
            }

            [Unity.Burst.BurstDiscard]
            public void RequireIndexInBounds() {
                if (m_Index < 0 || m_Index >= 64) {
                    // ReSharper disable once UseStringInterpolation (due to Burst)
                    throw new System.Exception(
                        string.Format("Index out of bounds: {0}", m_Index));
                }
            }
        }

        private readonly GoapAction m_Element0;

        private readonly GoapAction m_Element1;

        private readonly GoapAction m_Element2;

        private readonly GoapAction m_Element3;

        private readonly GoapAction m_Element4;

        private readonly GoapAction m_Element5;

        private readonly GoapAction m_Element6;

        private readonly GoapAction m_Element7;

        private readonly GoapAction m_Element8;

        private readonly GoapAction m_Element9;

        private readonly GoapAction m_Element10;

        private readonly GoapAction m_Element11;

        private readonly GoapAction m_Element12;

        private readonly GoapAction m_Element13;

        private readonly GoapAction m_Element14;

        private readonly GoapAction m_Element15;

        private readonly GoapAction m_Element16;

        private readonly GoapAction m_Element17;

        private readonly GoapAction m_Element18;

        private readonly GoapAction m_Element19;

        private readonly GoapAction m_Element20;

        private readonly GoapAction m_Element21;

        private readonly GoapAction m_Element22;

        private readonly GoapAction m_Element23;

        private readonly GoapAction m_Element24;

        private readonly GoapAction m_Element25;

        private readonly GoapAction m_Element26;

        private readonly GoapAction m_Element27;

        private readonly GoapAction m_Element28;

        private readonly GoapAction m_Element29;

        private readonly GoapAction m_Element30;

        private readonly GoapAction m_Element31;

        private readonly GoapAction m_Element32;

        private readonly GoapAction m_Element33;

        private readonly GoapAction m_Element34;

        private readonly GoapAction m_Element35;

        private readonly GoapAction m_Element36;

        private readonly GoapAction m_Element37;

        private readonly GoapAction m_Element38;

        private readonly GoapAction m_Element39;

        private readonly GoapAction m_Element40;

        private readonly GoapAction m_Element41;

        private readonly GoapAction m_Element42;

        private readonly GoapAction m_Element43;

        private readonly GoapAction m_Element44;

        private readonly GoapAction m_Element45;

        private readonly GoapAction m_Element46;

        private readonly GoapAction m_Element47;

        private readonly GoapAction m_Element48;

        private readonly GoapAction m_Element49;

        private readonly GoapAction m_Element50;

        private readonly GoapAction m_Element51;

        private readonly GoapAction m_Element52;

        private readonly GoapAction m_Element53;

        private readonly GoapAction m_Element54;

        private readonly GoapAction m_Element55;

        private readonly GoapAction m_Element56;

        private readonly GoapAction m_Element57;

        private readonly GoapAction m_Element58;

        private readonly GoapAction m_Element59;

        private readonly GoapAction m_Element60;

        private readonly GoapAction m_Element61;

        private readonly GoapAction m_Element62;

        private readonly GoapAction m_Element63;

        public ref GoapAction this[int index] {
            get {
                RequireIndexInBounds(index);
                return ref GetElement(index);
            }
        }

        private ref GoapAction GetElement(int index) {
            fixed (GoapAction* elements = &m_Element0) {
                return ref elements[index];
            }
        }

        private void SetElement(int index, GoapAction value) {
            fixed (GoapAction* elements = &m_Element0) {
                elements[index] = value;
            }
        }

        public const int Length = 64;

        public Enumerator GetEnumerator() {
            // Safe because Enumerator is a 'ref struct'
            fixed (GoapAction* elements = &m_Element0) {
                return new Enumerator(elements);
            }
        }

        private static void RequireIndexInBounds(int index) {
            if (index < 0 || index >= 64) {
                // ReSharper disable once UseStringInterpolation (due to Burst)
                throw new System.Exception(
                    string.Format("Index out of bounds: {0}", index));
            }
        }
    }
}