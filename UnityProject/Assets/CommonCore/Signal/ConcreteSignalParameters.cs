//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Common;

namespace Common.Signal {
    class ConcreteSignalParameters : ISignalParameters {
        private Stack<Dictionary<string, object>> parameterStack = new Stack<Dictionary<string, object>>();

	    /**
		    * Constructor
		    */
	    public ConcreteSignalParameters() {
	    }

	    #region ISignalParameters implementation
	    public void AddParameter(string key, object value) {
            // This will throw an error if there are no parameter map on the stack
            // Client should always call Signal.ClearParameters() prior to adding parameters
            this.parameterStack.Peek()[key] = value;
	    }
		
	    private object GetParameter(string key) {
		    return this.parameterStack.Peek()[key];
	    }

	    public Option<T> GetParameter<T>(string key) where T : class {
		    T value = GetParameter(key) as T;
		    return value == null ? Option<T>.NONE : Option<T>.Some(value);
	    }

	    public bool HasParameter(string key) {
		    return this.parameterStack.Peek().ContainsKey(key);
	    }

        #endregion

        /// <summary>
        /// Pushes a new set of parameters
        /// We did it this way because there may be an instance where a signal listener would also dispatch the same signal it listened to
        /// When this happens, the parameters would be replaced if we only maintained one map of parameters per signal
        /// </summary>
	    public void PushParameters() {
            this.parameterStack.Push(NewParameterMap());
	    }

        /// <summary>
        /// Pops the current set of parameters making the parameter next to it the current set of parameters
        /// </summary>
        public void PopParameters() {
            // This will throw an error if parameterStack is empty
            // The states better be consistent
            POOL.Recycle(this.parameterStack.Peek());
            this.parameterStack.Pop();
        }

        public bool HasParameters {
            get {
                return this.parameterStack.Count > 0;
            }
        }

        private static readonly Pool<Dictionary<string, object>> POOL = new Pool<Dictionary<string, object>>();

        private static Dictionary<string, object> NewParameterMap() {
            Dictionary<string, object> newInstance = POOL.Request();
            newInstance.Clear();
            return newInstance;
        }
    }
}
