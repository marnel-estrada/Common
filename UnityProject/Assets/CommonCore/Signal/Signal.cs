//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

using UnityEngine;

using Common;

namespace Common.Signal {
	/**
	 * A simple class that can dispatch actions to listeners
	 */
	public class Signal {

		private readonly string name;

		private ConcreteSignalParameters parameters;

		public delegate void SignalListener(ISignalParameters parameters);

		private SimpleList<SignalListener> listenerList;

		/**
		 * Constructor
		 */
		public Signal(string name) {
			this.name = name;
			this.listenerList = new SimpleList<SignalListener>();
		}

		/**
		 * Clears the parameters of the signal
		 */
		public void ClearParameters() {
            if (this.parameters == null) {
                this.parameters = new ConcreteSignalParameters();
            }

            this.parameters.PushParameters();
		}

		/**
		 * Adds a parameter to the signal
		 */
		public void AddParameter(string key, object value) {
            // This will throw an error if ClearParameters() is not invoked prior to calling this method
			this.parameters.AddParameter(key, value);
		}

		/**
		 * Adds a listener
		 */
		public void AddListener(SignalListener listener) {
			this.listenerList.Add(listener);
		}

		/**
		 * Removes the specified listener
		 */
		public void RemoveListener(SignalListener listener) {
			this.listenerList.Remove(listener);
		}

		/**
		 * Dispatches the signal thus invoking its listeners
		 */
		public void Dispatch() {
            try {
                if (this.listenerList.Count == 0) {
                    Debug.Log("There are no listeners to the signal: " + this.name);
                }

                for (int i = 0; i < this.listenerList.Count; ++i) {
                    // invoke the listener
                    this.listenerList[i](this.parameters); // note that the parameters passed may be null if there was none specified
                }
            } finally {
                // Pop parameters for every Dispatch
                // We check if there was indeed parameters because there are signals that are dispatched without adding parameters
                if (this.parameters != null && this.parameters.HasParameters) {
                    this.parameters.PopParameters();
                }
            }
		}

		public string Name {
			get {
				return name;
			}
		}

	}
}
