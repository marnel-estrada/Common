////////////////////////////////////////////////////////////////////////////////
// Warning: This file was automatically generated by SmallBufferGenerator.
//          If you edit this by hand, the next run of SmallBufferGenerator
//          will overwrite your edits.
////////////////////////////////////////////////////////////////////////////////

namespace CommonEcs {
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public unsafe struct UShortBuckets16 {
        public ref struct Enumerator {
            private readonly UShortList16* m_Elements;

            private int m_Index;

            public Enumerator(UShortList16* elements) {
                m_Elements = elements;
                m_Index = -1;
            }

            public bool MoveNext() {
                m_Index++;

                return m_Index < 16;
            }

            public ref UShortList16 Current {
                get {
                    RequireIndexInBounds();

                    return ref m_Elements[m_Index];
                }
            }

            [Unity.Burst.BurstDiscard]
            public void RequireIndexInBounds() {
                if (m_Index < 0 || m_Index >= 16) {
                    throw new System.InvalidOperationException("Index out of bounds: " + m_Index);
                }
            }
        }

        private readonly UShortList16 m_Element0;

        private readonly UShortList16 m_Element1;

        private readonly UShortList16 m_Element2;

        private readonly UShortList16 m_Element3;

        private readonly UShortList16 m_Element4;

        private readonly UShortList16 m_Element5;

        private readonly UShortList16 m_Element6;

        private readonly UShortList16 m_Element7;

        private readonly UShortList16 m_Element8;

        private readonly UShortList16 m_Element9;

        private readonly UShortList16 m_Element10;

        private readonly UShortList16 m_Element11;

        private readonly UShortList16 m_Element12;

        private readonly UShortList16 m_Element13;

        private readonly UShortList16 m_Element14;

        private readonly UShortList16 m_Element15;

        public ref UShortList16 this[int index] {
            get {
                RequireIndexInBounds(index);

                return ref GetElement(index);
            }
        }

        private ref UShortList16 GetElement(int index) {
            fixed (UShortList16* elements = &m_Element0) {
                return ref elements[index];
            }
        }

        private void SetElement(int index, UShortList16 value) {
            fixed (UShortList16* elements = &m_Element0) {
                elements[index] = value;
            }
        }

        public const int Length = 16;

        public Enumerator GetEnumerator() {
            // Safe because Enumerator is a 'ref struct'
            fixed (UShortList16* elements = &m_Element0) {
                return new Enumerator(elements);
            }
        }

        [Unity.Burst.BurstDiscard]
        public void RequireIndexInBounds(int index) {
            if (index < 0 || index >= 16) {
                throw new System.InvalidOperationException("Index out of bounds: " + index);
            }
        }
    }
}