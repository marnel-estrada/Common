// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace Common.Signal {
	/**
	 * A utility class that maps a signals name to itself.
	 * This is used to get reference of a signal by name.
	 */
	public class StringToSignalMapper {
	
		private Dictionary<string, Signal> mapping;
	
		/**
		 * Constructor
		 */
		public StringToSignalMapper() {
			this.mapping = new Dictionary<string, Signal>();
		}
		
		/**
		 * Adds a mapping
		 */
		public void Add(Signal signal) {
			Assertion.IsTrue(!mapping.ContainsKey(signal.Name)); // signal should not be in the mapping yet
			mapping[signal.Name] = signal;
		}
		
		/**
		 * Looks for the signal with the specified name and dispatches it
		 */
		public void Dispatch(string signalName) {
			Assertion.IsTrue(mapping.ContainsKey(signalName)); // there should be signal mapping
			mapping[signalName].Dispatch();
		}
		
		/**
		 * Returns whether or not the mapper is empty
		 */
		public bool IsEmpty() {
			return this.mapping.Count == 0;
		}

        /// <summary>
		/// Returns the signal with the specified name
		/// </summary>
		/// <param name="signalName">Signal name.</param>
		public Signal Get(string signalName) {
            Signal signal = null;
            Assertion.IsTrue(this.mapping.TryGetValue(signalName, out signal), "Signal not found: " + signalName);
            return signal;
        }

    }
}
