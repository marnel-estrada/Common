//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEditor;
using UnityEngine;

namespace Common {
	[InitializeOnLoad]
	public class HierarchyColorCode {

		private const string PREF_KEY = "Common.HierarchyColorCode";

		static HierarchyColorCode() {
			// Set pref if not existing yet
			if (!EditorPrefs.HasKey(PREF_KEY)) {
				EditorPrefs.SetBool(PREF_KEY, true);
			}

			ShowColorCode(EditorPrefs.GetBool(PREF_KEY));
		}

		[MenuItem("Window/Toggle Hierarchy Color Code")]
		static void ToggleHeirarchyColorCode()
		{
			bool toggle = EditorPrefs.GetBool(PREF_KEY);
			EditorPrefs.SetBool(PREF_KEY, !toggle);
			ShowColorCode(EditorPrefs.GetBool(PREF_KEY));
		}

		private static void ShowColorCode(bool show) {
			if(show) {
				EditorApplication.hierarchyWindowItemOnGUI += DrawHierarchyItem;
			} else {
				EditorApplication.hierarchyWindowItemOnGUI -= DrawHierarchyItem;
			}

			EditorApplication.RepaintHierarchyWindow();
		}

		private static Color DEFAULT_BACKGROUND_COLOR = new Color(1.0f, 1.0f, 1.0f, 0);
        private const int INDICATOR_WIDTH = 20;

		private static void DrawHierarchyItem(int instanceId, Rect selectionRect) {
			GameObject target = EditorUtility.InstanceIDToObject(instanceId) as GameObject;
			if(target == null) {
				return;
			}

			HierarchyColor heirarchyColor = target.GetComponent<HierarchyColor>();
			if(heirarchyColor == null) {
				return;
			}

			Color originalColor = GUI.backgroundColor;
			GUI.backgroundColor = heirarchyColor.Color;

            Rect indicatorRect = new Rect(selectionRect) {
                x = selectionRect.xMax - selectionRect.height - 1,
                width = selectionRect.height
            };

			GUI.Box(indicatorRect, GUIContent.none);
			GUI.backgroundColor = originalColor;
		}

	}
}
