//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

using UnityEngine;

namespace Common {
	/**
	 * A utility class that adds dictionary like methods to a list of items.
	 */
	[Serializable]
	public class NamedMap<T> where T : NamedValueHolder {
		
		[SerializeField]
		private List<T> itemList;

        /**
		 * Constructor
		 */
        public NamedMap() {
		}
		
		private List<T> ItemList {
			get {
				if(this.itemList == null) {
					this.itemList = new List<T>();
				}
				
				return this.itemList;
			}
		}

        /// <summary>
        /// Clears the map of named variables
        /// </summary>
        public void Clear() {
            this.ItemList.Clear();
        }
		
		/**
		 * Adds an item
		 */
		public void Add(T item) {
			Assertion.Assert(!Contains(item.Name)); // should maintain uniqueness of each variable
			this.ItemList.Add(item);
		}
		
		/**
		 * Removes an item
		 */
		public void Remove(T item) {
			this.ItemList.Remove(item);
		}
		
		/**
		 * Removes an item by name.
		 */
		public void Remove(string name) {
			Assertion.Assert(Contains(name)); // should contain the specified variable name
			Remove(Get(name));
		}
		
		/**
		 * Returns the item with the specified name
		 */
		public T Get(string name) {
			int count = ItemList.Count;
			for(int i = 0; i < count; ++i) {
				if(ItemList[i].Name.Equals(name)) {
					return ItemList[i];
				}
			}
			
			// not found
			return default(T);
		}
		
		/**
		 * Returns whether or not the map contains an item with the specified name
		 */
		public bool Contains(string name) {
			int count = this.ItemList.Count;
			for(int i = 0; i < count; ++i) {
				if(ItemList[i].Name.Equals(name)) {
					return true;
				}
			}
			
			return false;
		}
		
		/**
		 * Returns iterator for the items contained in the map
		 */
		public IEnumerable<T> Items {
			get {
				return this.ItemList;
			}
		}

        /**
         * Returns the number of variables in the map
         */
        public int Count {
            get {
                return this.ItemList.Count;
            }
        }

        /**
         * Returns the entry at the specified index
         */
        public T GetAt(int index) {
            return this.ItemList[index];
        }

        public NamedValueHolder GetNamedValueHolderAt(int index) {
            return this.ItemList[index];
        }

    }
}
